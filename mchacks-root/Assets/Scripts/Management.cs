using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;using UnityEngine.EventSystems;using TMPro;using System.IO;using System;using OpenAI;using System.Threading.Tasks;using UnityEngine.Networking;using Newtonsoft.Json;public class Management : MonoBehaviour{    [SerializeField] public GameObject chairPosition;    [SerializeField] public GameObject player;        [SerializeField] public Rigidbody rb;    [SerializeField] public Collider capsuleCollider;        [SerializeField] public Collider floorCollider;    [SerializeField] public AudioRecord audioRecorder;    [SerializeField] public UI_Manager uiManager;            [SerializeField] public TextMeshProUGUI questionText;    [SerializeField] public AudioSource npcSpeechSource;    private const string BACKEND_BASE_URL = "https://54.166.77.164/";        private string company;    private int amountOfQuestions;    private string interviewer;        bool questionSubmitted = false;         public List<object> questions;        private IEnumerator WaitForSubmitCoroutine()    {        yield return new WaitUntil(() => questionSubmitted == true);        questionSubmitted = false;    }    public IEnumerator InterviewCoroutine()    {        var data = questions;        for (int i = 0; i < amountOfQuestions; i++)        {            //make new coroutine for the interview            // Assuming data[i] is a dictionary-like structure            Dictionary<string, object> questionData = (Dictionary<string, object>)data[i];            string txt = questionData["question_text"].ToString();            questionText.text = txt;            //string base64Audio = data[i]["mp3_b64"];            //byte[] audioData = Convert.FromBase64String(base64Audio);            //AudioClip audioClip = WavUtility.ToAudioClip(audioData, 0, audioData.Length, 0, 0);            // convert base64 to audio clip            // TODO            //npcSpeechSource.clip = audioClip;            //npcSpeechSource.Play();            //wait for question to finish            StartCoroutine(WaitForSubmitCoroutine());            //submit answer            string sttOutput = audioRecorder.output;            //send answer to backend on new thread and wait for response            // store returned score & review locally            //  TODO        }        yield return null;    }        private IEnumerator FetchQuestions(string company, int amountOfQuestions)    {        // send http request to backend to get base-64 and questions in json        // TODO        // Replace the URL with the actual URL you want to request        string endpoint = "/generate-questions";        // Create a UnityWebRequest object        UnityWebRequest webRequest = UnityWebRequest.Post(            BACKEND_BASE_URL + endpoint,            "{ \"company\": " + company + ", \"amount\": " + amountOfQuestions + " }",            "application/json"        );        webRequest.certificateHandler = new BypassCertificate();        // Send the request and wait for a response        yield return webRequest.SendWebRequest();        // Check for errors        if (webRequest.result == UnityWebRequest.Result.ConnectionError || webRequest.result == UnityWebRequest.Result.ProtocolError)        {            Debug.LogError("Error: " + webRequest.error);        }        else        {            // Request was successful, do something with the response            string jsonResponse = webRequest.downloadHandler.text;            Debug.Log(jsonResponse);            //Debug.Log("Response: " + jsonResponse);            // Parse the JSON response            //List<Dictionary<string, string>> questionsData = JsonUtility.FromJson<List<Dictionary<string, string>>>(jsonResponse);            List<Dictionary<string, string>> questionsData = JsonConvert.DeserializeObject<List<Dictionary<string, string>>>(jsonResponse);                        // Now you can iterate through the questionsData and extract question_text and mp3_b64            foreach (var question in questionsData)            {                string questionText = question["question_text"];                string mp3B64 = question["mp3_b64"];                Debug.Log(questionText);                //Debug.Log(mp3B64)                // Do something with questionText and mp3B64            }        }        questions = new List<object>() { };    }        public void StartInterview(string company, int amountOfQuestions, string interviewer)    {        floorCollider.enabled = false;        rb.isKinematic = true;        rb.useGravity = false;        capsuleCollider.enabled = false;        rb.constraints = RigidbodyConstraints.FreezeAll;        rb.useGravity = false;        player.transform.position = chairPosition.transform.position;        player.transform.rotation = chairPosition.transform.rotation;                this.company = company;        this.amountOfQuestions = amountOfQuestions;        this.interviewer = interviewer;                // send request to backend to get questions and base-64 audio file        StartCoroutine(FetchQuestions(this.company, this.amountOfQuestions));        StartCoroutine(InterviewCoroutine());            }    public void OnAnswerSubmitted()    {        questionSubmitted = true;    }                           public void FinishInterview()    {        uiManager.ResetUI();        player.transform.position = new Vector3(0,0,0);        rb.isKinematic = false;        capsuleCollider.enabled = true;        rb.constraints = RigidbodyConstraints.None;        rb.useGravity = true;        floorCollider.enabled = true;            }        public void QuitGame()    {        Application.Quit();    }}public class BypassCertificate : CertificateHandler{    // Override the ValidateCertificate method to bypass certificate validation    protected override bool ValidateCertificate(byte[] certificateData)    {        // Always return true to bypass certificate validation        return true;    }}